// src/App.jsx
import React, { useState } from "react";
import Controls from "./components/Controls";
import Table from "./components/Table";
import {
  createDeck,
  dealInitialHands,
  calculateHandValue,
  drawCard,
} from "./gameEngine";
import "./App.css";

/**
 * App ‚Äî –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä—ã Blackjack.
 * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–¥–æ–π, —Ä—É–∫–∞–º–∏ –∏–≥—Ä–æ–∫–∞/–¥–∏–ª–µ—Ä–∞, —Å—Ç–∞–≤–∫–æ–π, Double –∏ Stand.
 */

export default function App() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–¥—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  const [deck, setDeck] = useState(() => createDeck());

  // –†—É–∫–∏
  const [playerHand, setPlayerHand] = useState([]);
  const [dealerHand, setDealerHand] = useState([]);

  // UI / –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∞—Ç—É—Å
  const [dealerHidden, setDealerHidden] = useState(true); // true ‚Äî –≤—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞ —Å–∫—Ä—ã—Ç–∞
  const [inRound, setInRound] = useState(false);
  const [message, setMessage] = useState("");

  // –§–∏–Ω–∞–Ω—Å—ã
  const [balance, setBalance] = useState(1000);
  const [bet, setBet] = useState(100);
  const [currentBet, setCurrentBet] = useState(0);

  // Double
  const [hasDoubled, setHasDoubled] = useState(false);

  // ----- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -----

  // –ï—Å–ª–∏ –∫–æ–ª–æ–¥–∞ –º–∞–ª–µ–Ω—å–∫–∞—è ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º (reshuffle)
  function ensureDeckLocal(d) {
    if (!d || d.length < 15) {
      const nd = createDeck();
      return nd;
    }
    return d;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π Blackjack (–¥–≤–µ –∫–∞—Ä—Ç—ã = 21)
  function isBlackjack(hand) {
    return hand.length === 2 && calculateHandValue(hand) === 21;
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞: –¥–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—Å –∞–Ω–∏–º–∞—Ü–∏–µ–π)
  async function finishRound(playerFinalHand, deckState, stakeOverride) {
    setDealerHidden(false);
    let rest = deckState ? [...deckState] : [...deck];
    let dealerFinal = [...dealerHand];

    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–±–æ—Ä –¥–∏–ª–µ—Ä–∞
    while (calculateHandValue(dealerFinal) < 17) {
      await new Promise((resolve) => setTimeout(resolve, 500));
      rest = ensureDeckLocal(rest);
      const { card, rest: newRest } = drawCard(rest);
      dealerFinal.push(card);
      rest = newRest;
      setDealerHand([...dealerFinal]);
      setDeck([...rest]);
    }

    // –ñ–¥—ë–º, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ "–¥–æ—à–ª–∞"
    await new Promise((resolve) => setTimeout(resolve, 400));

    const pv = calculateHandValue(playerFinalHand);
    const dv = calculateHandValue(dealerFinal);
    const stake = typeof stakeOverride === 'number' ? stakeOverride : currentBet;

    if (pv > 21) {
      setMessage("–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.");
    } else if (dv > 21) {
      setMessage(`–î–∏–ª–µ—Ä –ø–µ—Ä–µ–±—Ä–∞–ª ‚Äî –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +${stake}`);
      setBalance((prev) => prev + stake * 2);
    } else if (pv > dv) {
      setMessage("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!");
      setBalance((prev) => prev + stake * 2);
    } else if (pv < dv) {
      setMessage("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.");
    } else {
      setMessage("–ù–∏—á—å—è (push). –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.");
      setBalance((prev) => prev + stake);
    }
    setInRound(false);
  }

  // ----- –î–µ–π—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞ -----

  // –†–∞–∑–¥–∞—Ç—å
  const deal = () => {
    if (inRound) return;
    if (bet <= 0) {
      setMessage("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
      return;
    }
    if (balance < bet) {
      setMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.");
      return;
    }

    // –ï—Å–ª–∏ –≤ –∫–æ–ª–æ–¥–µ –º–∞–ª–æ –∫–∞—Ä—Ç ‚Äî –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º
    let localDeck = ensureDeckLocal([...deck]);

    // –†–∞–∑–¥–∞—á–∞ –ø–µ—Ä–≤—ã—Ö –∫–∞—Ä—Ç (—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç player, dealer, rest)
    const { player, dealer, rest } = dealInitialHands(localDeck);

    setPlayerHand(player);
    setDealerHand(dealer);
    setDeck(rest);
    setDealerHidden(true);
    setInRound(true);
    setHasDoubled(false);
    setMessage("");

    // –°–ø–∏—Å—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
    setBalance((prev) => prev - bet);
    setCurrentBet(bet);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Blackjack —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏
    const pBJ = isBlackjack(player);
    const dBJ = isBlackjack(dealer);

    if (pBJ || dBJ) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –¥–∏–ª–µ—Ä–∞
      setDealerHidden(false);

      if (pBJ && !dBJ) {
        // –í—ã–∏–≥—Ä—ã—à 3:2 ‚Äî –≤–µ—Ä–Ω—É—Ç—å 2.5 * bet (—É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ bet —É–∂–µ —Å–ø–∏—Å–∞–Ω)
        setMessage("Blackjack! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 3:2.");
        setBalance((prev) => prev + bet * 2.5);
      } else if (!pBJ && dBJ) {
        setMessage("–î–∏–ª–µ—Ä –∏–º–µ–µ—Ç Blackjack. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.");
        // —Å—Ç–∞–≤–∫–∞ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
      } else {
        // –û–±–∞ ‚Äî Blackjack => push, –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–≤–∫—É
        setMessage("–ù–∏—á—å—è: –æ–±–∞ Blackjack.");
        setBalance((prev) => prev + bet);
      }
      setInRound(false);
    }
  };

  // Hit ‚Äî –≤–∑—è—Ç—å –∫–∞—Ä—Ç—É
  const hit = () => {
    if (!inRound) return;

    let localDeck = ensureDeckLocal([...deck]);
    const { card, rest } = drawCard(localDeck);

    const newHand = [...playerHand, card];
    setPlayerHand(newHand);
    setDeck(rest);

    const pv = calculateHandValue(newHand);
    if (pv > 21) {
      // –ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–±—Ä–∞–ª ‚Äî —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –¥–∏–ª–µ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
      setDealerHidden(false);
      setMessage("–ü–µ—Ä–µ–±–æ—Ä! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.");
      setInRound(false);
    }
  };

  // Stand ‚Äî –∏–≥—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ö–æ–¥; –¥–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∏ —Å—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const stand = () => {
    if (!inRound) return;
    finishRound(playerHand, deck);
  };

  // Double Down ‚Äî —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É, –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ö–æ–¥
  const doubleDown = () => {
    if (!inRound) return;
    if (hasDoubled) return;
    if (playerHand.length !== 2) {
      setMessage("Double –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö –∫–∞—Ä—Ç–∞—Ö.");
      return;
    }
    if (balance < currentBet) {
      setMessage("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–¥–≤–æ–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏.");
      return;
    }

    // –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–µ–π—Ç–∞
    const doubleBet = currentBet * 2;
    setBalance((prev) => prev - currentBet);
    setCurrentBet(doubleBet);
    setHasDoubled(true);

    // –¥–∞—ë–º —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –∫–∞—Ä—Ç—É
    let localDeck = ensureDeckLocal([...deck]);
    const { card, rest } = drawCard(localDeck);
    const newHand = [...playerHand, card];
    setPlayerHand(newHand);
    setDeck(rest);

    const pv = calculateHandValue(newHand);
    if (pv > 21) {
      setDealerHidden(false);
      setMessage("–ü–µ—Ä–µ–±–æ—Ä –ø–æ—Å–ª–µ Double! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.");
      setInRound(false);
      return;
    }

    // –∏–Ω–∞—á–µ –¥–∏–ª–µ—Ä –∏–≥—Ä–∞–µ—Ç –∏ —Ä–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º doubleBet
    finishRound(newHand, rest, doubleBet);
  };

  // –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ ‚Äî —Å–±—Ä–æ—Å –ø–æ–ª—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å)
  const onNextRound = () => {
    setPlayerHand([]);
    setDealerHand([]);
    setDealerHidden(true);
    setCurrentBet(0);
    setHasDoubled(false);
    setMessage("–ù–∞–∂–º–∏—Ç–µ ¬´–†–∞–∑–¥–∞—Ç—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥.");
    setInRound(false);
  };

  // ----- –í—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è UI -----
  const canDouble =
    inRound &&
    playerHand.length === 2 &&
    !hasDoubled &&
    balance >= currentBet;

  const roundFinished = !inRound && (playerHand.length > 0 || dealerHand.length > 0);

  return (
    <div className="App">
      <h1>Blackjack</h1>

      <div className="meta" style={{ marginBottom: 12 }}>
        <div>–ë–∞–ª–∞–Ω—Å: <strong>üí∞ {balance}</strong></div>
        <div style={{ marginLeft: 16 }}>–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <strong>{currentBet}</strong></div>
      </div>

      <Table dealerHand={dealerHand} playerHand={playerHand} dealerHidden={dealerHidden} />

      <div className="message" style={{ marginTop: 12 }}>{message}</div>

      <Controls
        balance={balance}
        bet={bet}
        setBet={setBet}
        inRound={inRound}
        onDeal={deal}
        onHit={hit}
        onStand={stand}
        onDouble={doubleDown}
        canDouble={canDouble}
        roundFinished={roundFinished}
        onNextRound={onNextRound}
      />
    </div>
  );
}
