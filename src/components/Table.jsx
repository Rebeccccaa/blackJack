// src/components/Table.jsx
import React, { useEffect, useRef, useState } from 'react';
import { calculateHandValue } from '../gameEngine';

const STEP_MS = 420; // –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç

export default function Table({ dealerHand = [], playerHand = [], dealerHidden = true }) {
  const [shownDealer, setShownDealer] = useState([]);
  const [shownPlayer, setShownPlayer] = useState([]);

  // —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö/–∞–Ω–∏–º–∞—Ü–∏—è—Ö
  const dealerTimers = useRef([]);
  const playerTimers = useRef([]);

  // –æ—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ (—É—Ç–∏–ª–∏—Ç–∞)
  const clearTimers = (timersRef) => {
    timersRef.current.forEach((id) => clearTimeout(id));
    timersRef.current = [];
  };

  // ----- Dealer: –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è —Å—Ç–∞—Ä—ã–µ -----
  useEffect(() => {
    // —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    clearTimers(dealerTimers);

    // –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º shownDealer (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥)
    if (!dealerHand || dealerHand.length === 0) {
      setShownDealer([]);
      return;
    }

    // –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è —Ä—É–∫–∞ —Å—Ç–∞–ª–∞ –∫–æ—Ä–æ—á–µ –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞), —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
    if (dealerHand.length < shownDealer.length) {
      setShownDealer(dealerHand.slice(0)); // –ª–∏–±–æ [], –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ 0
      return;
    }

    // –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç –Ω–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (dealerHand.length === shownDealer.length) return;

    // –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ä—Ç—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    const startIndex = shownDealer.length;
    for (let i = startIndex; i < dealerHand.length; i++) {
      // –∏—Å–ø–æ–ª—å–∑—É–µ–º let i (–±–ª–æ—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å) ‚Äî –∏–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      const delay = (i - startIndex) * STEP_MS;
      const timerId = setTimeout(() => {
        // –∑–∞—â–∏—Ç–∏–º—Å—è: –∫–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –º–µ–∂–¥—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤—ã–∑–æ–≤–æ–º
        const card = dealerHand[i];
        if (!card) return;

        setShownDealer((prev) => {
          // –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ –≤—Å—Ç–∞–≤–∏–ª —ç—Ç—É –∫–∞—Ä—Ç—É)
          if (prev.some((c) => c && c.uid && card.uid && c.uid === card.uid)) {
            return prev;
          }
          return [...prev, card];
        });
      }, delay);
      dealerTimers.current.push(timerId);
    }

    // –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ unmount –∏–ª–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ñ—Ñ–µ–∫—Ç–µ
    return () => clearTimers(dealerTimers);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [dealerHand]);

  // ----- Player: –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ dealer -----
  useEffect(() => {
    clearTimers(playerTimers);

    if (!playerHand || playerHand.length === 0) {
      setShownPlayer([]);
      return;
    }

    if (playerHand.length < shownPlayer.length) {
      setShownPlayer(playerHand.slice(0));
      return;
    }

    if (playerHand.length === shownPlayer.length) return;

    const startIndex = shownPlayer.length;
    for (let i = startIndex; i < playerHand.length; i++) {
      const delay = (i - startIndex) * STEP_MS;
      const timerId = setTimeout(() => {
        const card = playerHand[i];
        if (!card) return;

        setShownPlayer((prev) => {
          if (prev.some((c) => c && c.uid && card.uid && c.uid === card.uid)) {
            return prev;
          }
          return [...prev, card];
        });
      }, delay);
      playerTimers.current.push(timerId);
    }

    return () => clearTimers(playerTimers);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [playerHand]);

  // --- render ---
  return (
    <div className="table">
      <div className="panel">
        <h3>–î–∏–ª–µ—Ä {dealerHidden ? '(?)' : `(${calculateHandValue(dealerHand)})`}</h3>
        <div className="cards">
          {shownDealer.map((c, i) => {
            if (!c) return null;
            // —Å—Ç–∞–±–∏–ª—å–Ω—ã–π key: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º uid, –∏–Ω–∞—á–µ fallback
            const key = c.uid || `${c.rank}-${c.suit}-${i}`;
            const isHidden = i === 1 && dealerHidden;
            // –∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É (–æ–Ω–∞ –∂–µ –Ω–æ–≤–∞—è)
            const animate = i === shownDealer.length - 1;
            return (
              <div key={key} className={`card${animate ? ' card-animate' : ''}`}>
                {isHidden ? 'üÇ†' : `${c.rank}${c.suit}`}
              </div>
            );
          })}
        </div>
      </div>

      <div className="panel">
        <h3>–ò–≥—Ä–æ–∫ ({calculateHandValue(playerHand)})</h3>
        <div className="cards">
          {shownPlayer.map((c, i) => {
            if (!c) return null;
            const key = c.uid || `${c.rank}-${c.suit}-${i}`;
            const animate = i === shownPlayer.length - 1;
            return (
              <div key={key} className={`card${animate ? ' card-animate' : ''}`}>
                {`${c.rank}${c.suit}`}
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}
